@model ArandanoIRT.Web._1_Application.DTOs.Admin.DashboardViewModel
@using System.Text.Json
@{
    ViewData["Title"] = "Dashboard Principal";
    Layout = "_AdminLayout";

    var tempDataJson = Model.TemperatureChartData != null ? JsonSerializer.Serialize(Model.TemperatureChartData) : /* lang=json,strict */ "{\"Labels\":[], \"Values\":[], \"DataSetLabel\":\"Temperatura\"}";
    var humDataJson = Model.HumidityChartData != null ? JsonSerializer.Serialize(Model.HumidityChartData) : /* lang=json,strict */ "{\"Labels\":[], \"Values\":[], \"DataSetLabel\":\"Humedad\"}";
    var lightDataJson = Model.LightChartData != null ? JsonSerializer.Serialize(Model.LightChartData) : /* lang=json,strict */ "{\"Labels\":[], \"Values\":[], \"DataSetLabel\":\"Luz\"}";
}
@* Estilos personalizados *@
<style>
    .badge-morado { background-color: #6f42c1; color: white; }
    .badge-rosado { background-color: #e83e8c; color: white; }
    .badge-naranja-claro { background-color: #fd9843; color: white; } /* Naranja más claro */
    .badge-marron { background-color: #795548; color: white; }

    .card-body .row .badge {
        padding: 0.25em 0.4em; /* Reducir padding para badges más compactos */
        font-size: 0.85em;     /* Reducir tamaño de fuente en badges */
        vertical-align: middle;
    }

    .card-body .row h6.small { /* Encabezados de columna: Ambiental, Ciudad, etc. */
        font-size: 0.8rem;   /* Tamaño actual está bien, pero podemos ajustar si es necesario */
        font-weight: bold;   /* Hacerlos un poco más prominentes como en la imagen */
        margin-bottom: 0.3rem !important; /* Reducir espacio inferior */
        color: #333; /* Un color un poco más oscuro para los títulos */
    }

    .card-body .row .data-row { /* Contenedor de cada línea "Etiqueta: [Badge]" o "Etiqueta: Texto" */
        line-height: 1.3;      /* Reducir interlineado general */
        margin-bottom: 1px !important; /* Espacio mínimo entre filas de datos */
        display: flex;
        justify-content: space-between;
        align-items: center; /* Centrar verticalmente etiqueta y badge/texto */
    }
    .card-body .row .data-row > span:first-child { /* Las etiquetas como T.Amb:, H.Ciu: */
        padding-right: 0.5em;
        white-space: nowrap; /* Evitar que la etiqueta se parta */
        font-size: 0.9em; /* Tamaño de las etiquetas de datos */
    }

    .climate-text-block div:first-child { /* "Clima Ciu:" label */
         font-size: 0.9em;
         white-space: nowrap;
         padding-right: 0.5em;
    }
    .climate-text-block .climate-text-detail { /* Descripción del clima */
        font-size: 0.85em; /* Hacer el texto del clima un poco más pequeño */
        line-height: 1.2;   /* Interlineado apretado para el texto del clima */
        text-align: left;   /* Asegurar alineación a la izquierda para el texto descriptivo */
        width: 100%; /* Asegurar que ocupe el espacio disponible para el texto */
    }
    .data-row .climate-text-container { /* Contenedor para el Clima Ciu y su texto */
        display: flex;
        flex-direction: column;
        align-items: flex-start; /* Alinear elementos a la izquierda */
        width: 100%; /* Ocupar todo el ancho disponible para el texto */
    }
     .card-body .row [class*="col-"] { /* Columnas internas de las tarjetas */
        padding-right: 8px;  /* Reducir padding entre columnas internas */
        padding-left: 8px;
    }
</style>

<h1>@ViewData["Title"]</h1>

@* Formulario de Filtros *@
<form asp-action="Index" asp-controller="Dashboard" asp-area="Admin" method="get" class="mb-4 p-3 border rounded bg-light">
    <div class="row g-3 align-items-end">
        <div class="col-md-4">
            <label asp-for="SelectedCropId" class="form-label">Filtrar por Cultivo:</label>
            <select asp-for="SelectedCropId" asp-items="Model.AvailableCrops" class="form-select" onchange="this.form.submit()">
                @* La opción "Todos" se inserta desde el controlador *@
            </select>
        </div>
        @if (Model.SelectedCropId.HasValue || Model.SelectedPlantId.HasValue)
        {
            <div class="col-md-4">
                <label asp-for="SelectedPlantId" class="form-label">Filtrar por Planta:</label>
                <select asp-for="SelectedPlantId" asp-items="Model.AvailablePlants" class="form-select" onchange="this.form.submit()">
                    @* La opción "Todos" se inserta desde el controlador *@
                </select>
            </div>
        }
        else
        {
            <div class="col-md-4">
                @* Espacio reservado si no hay filtro de planta para mantener alineación *@
            </div>
        }
        <div class="col-md-2">
             <button type="submit" class="btn btn-primary w-100 mt-md-4">Aplicar</button>
        </div>
        <div class="col-md-2">
            <a asp-action="Index" asp-controller="Dashboard" asp-area="Admin" class="btn btn-outline-secondary w-100 mt-md-4">Limpiar</a>
        </div>
    </div>
</form>

<div class="row mb-4">
    @* Tarjeta: Últimas Lecturas Registradas *@
    <div class="col-lg-5 col-md-12 mb-3 d-flex"> @* Cambiado a col-lg-5 *@
        <div class="card h-100 flex-fill">
            <div class="card-header fw-bold">Últimas Lecturas Registradas</div>
            <div class="card-body p-3">
                @if (Model.LatestAmbientData != null || Model.ThermalStatistics?.LatestThermalReadingTimestamp != null)
                {
                    <div class="row">
                        @* Columna 1: Ambiental *@
                        <div class="col-md-4">
                            <h6 class="text-muted small">Ambiental @if(Model.LatestAmbientData != null){<small class="fw-normal">(@Model.LatestAmbientData.RecordedAt.ToString("M/d h:mm tt"))</small>}</h6>
                            @if (Model.LatestAmbientData != null)
                            {
                                <div class="data-row"><span>T.Amb:</span><span class="badge badge-morado">@Model.LatestAmbientData.Temperature.ToString("0.0")°C</span></div>
                                <div class="data-row"><span>H.Amb:</span><span class="badge bg-info text-dark">@Model.LatestAmbientData.Humidity.ToString("0")%</span></div>
                                @if (Model.LatestAmbientData.Light.HasValue)
                                {
                                    <div class="data-row"><span>Luz:</span><span class="badge bg-warning text-dark">@Model.LatestAmbientData.Light?.ToString("0")lx</span></div>
                                }
                            } else { <p class="small text-muted mb-0">No hay datos.</p> }
                        </div>

                        @* Columna 2: Ciudad *@
                        <div class="col-md-4">
                             <h6 class="text-muted small">Ciudad</h6>
                            @if (Model.LatestAmbientData != null && (Model.LatestAmbientData.CityTemperature.HasValue || Model.LatestAmbientData.CityHumidity.HasValue || !string.IsNullOrEmpty(Model.LatestAmbientData.CityWeatherCondition)))
                            {
                                @if (Model.LatestAmbientData.CityTemperature.HasValue)
                                {
                                    <div class="data-row"><span>T.Ciu:</span><span class="badge badge-morado">@Model.LatestAmbientData.CityTemperature?.ToString("0.0")°C</span></div>
                                }
                                @if (Model.LatestAmbientData.CityHumidity.HasValue)
                                {
                                    <div class="data-row"><span>H.Ciu:</span><span class="badge bg-info text-dark">@Model.LatestAmbientData.CityHumidity?.ToString("0")%</span></div>
                                }
                                @if (!string.IsNullOrEmpty(Model.LatestAmbientData.CityWeatherCondition))
                                {
                                    <div class="data-row climate-text-container"> <div class="climate-text-block">
                                            <div>Clima Ciu:</div>
                                            <div class="climate-text-detail">@Model.LatestAmbientData.CityWeatherCondition</div>
                                        </div>
                                    </div>
                                }
                            } else { <p class="small text-muted mb-0">No hay datos.</p> }
                        </div>

                        @* Columna 3: Térmica *@
                        <div class="col-md-4">
                            <h6 class="text-muted small">Térmica @if(Model.ThermalStatistics?.LatestThermalReadingTimestamp != null){<small class="fw-normal">(@Model.ThermalStatistics.LatestThermalReadingTimestamp?.ToString("M/d h:mm tt"))</small>}</h6>
                            @if (Model.ThermalStatistics?.LatestThermalReadingTimestamp != null)
                            {
                                <div class="data-row"><span>T.Máx:</span><span class="badge bg-danger">@Model.ThermalStatistics.LatestMaxTemp?.ToString("0.0")°C</span></div>
                                <div class="data-row"><span>T.Prom:</span><span class="badge bg-secondary">@Model.ThermalStatistics.LatestAvgTemp?.ToString("0.0")°C</span></div>
                                <div class="data-row"><span>T.Mín:</span><span class="badge bg-primary">@Model.ThermalStatistics.LatestMinTemp?.ToString("0.0")°C</span></div>
                            } else { <p class="small text-muted mb-0">No hay datos.</p> }
                        </div>
                    </div>
                }
                else { <p class="small text-muted mb-0">No hay últimas lecturas.</p> }
            </div>
        </div>
    </div>
    
    @* Tarjeta: Promedios (Últimas 24 Horas) *@
    <div class="col-lg-7 col-md-12 mb-3 d-flex">  @* Cambiado a col-lg-7 *@
        <div class="card h-100 flex-fill">
            <div class="card-header fw-bold">Promedios (Últimas 24 Horas)</div>
            <div class="card-body p-3">
                @if (Model.AverageAmbientTemperature24h.HasValue || Model.MinAmbientTemperature24h.HasValue || Model.MaxAmbientTemperature24h.HasValue || (Model.ThermalStatistics?.AverageAvgTemp24h.HasValue == true))
                {
                    <div class="row">
                        @* Columna 1: Temperatura Ambiental *@
                        <div class="col-md-3 mb-2 mb-md-0">
                            <h6 class="text-muted small">Temp. Amb.</h6>
                            @if(Model.MaxAmbientTemperature24h.HasValue) { <div class="data-row"><span>T.Máx:</span><span class="badge bg-danger">@Model.MaxAmbientTemperature24h?.ToString("0.0")°C</span></div> }
                            @if(Model.AverageAmbientTemperature24h.HasValue) { <div class="data-row"><span>T.Med:</span><span class="badge badge-rosado">@Model.AverageAmbientTemperature24h?.ToString("0.0")°C</span></div> }
                            @if(Model.MinAmbientTemperature24h.HasValue) { <div class="data-row"><span>T.Mín:</span><span class="badge badge-morado">@Model.MinAmbientTemperature24h?.ToString("0.0")°C</span></div> }
                        </div>

                        @* Columna 2: Humedad Ambiental *@
                        <div class="col-md-3 mb-2 mb-md-0">
                            <h6 class="text-muted small">Hum. Amb.</h6>
                            @if(Model.MaxAmbientHumidity24h.HasValue) { <div class="data-row"><span>H.Máx:</span><span class="badge bg-success">@Model.MaxAmbientHumidity24h?.ToString("0")%</span></div> }
                            @if(Model.AverageAmbientHumidity24h.HasValue) { <div class="data-row"><span>H.Med:</span><span class="badge bg-info text-dark">@Model.AverageAmbientHumidity24h?.ToString("0")%</span></div> }
                            @if(Model.MinAmbientHumidity24h.HasValue) { <div class="data-row"><span>H.Mín:</span><span class="badge bg-primary">@Model.MinAmbientHumidity24h?.ToString("0")%</span></div> }
                        </div>

                        @* Columna 3: Luz Ambiental *@
                        <div class="col-md-3 mb-2 mb-md-0">
                            <h6 class="text-muted small">Luz Amb.</h6>
                            @if(Model.MaxAmbientLight24h.HasValue) { <div class="data-row"><span>Luz Máx:</span><span class="badge bg-warning text-dark">@Model.MaxAmbientLight24h?.ToString("0")lx</span></div> }
                            @if(Model.AverageAmbientLight24h.HasValue) { <div class="data-row"><span>Luz Med:</span><span class="badge badge-naranja-claro">@Model.AverageAmbientLight24h?.ToString("0")lx</span></div> }
                            @if(Model.MinAmbientLight24h.HasValue) { <div class="data-row"><span>Luz Mín:</span><span class="badge badge-marron">@Model.MinAmbientLight24h?.ToString("0")lx</span></div> }
                        </div>

                        @* Columna 4: Datos Térmicos *@
                        <div class="col-md-3">
                            <h6 class="text-muted small">Térmica</h6>
                            @if (Model.ThermalStatistics != null && (Model.ThermalStatistics.AverageMaxTemp24h.HasValue || Model.ThermalStatistics.AverageMinTemp24h.HasValue || Model.ThermalStatistics.AverageAvgTemp24h.HasValue))
                            {
                                @if(Model.ThermalStatistics.AverageMaxTemp24h.HasValue) { <div class="data-row"><span>T.Máx Med:</span><span class="badge bg-danger">@Model.ThermalStatistics.AverageMaxTemp24h?.ToString("0.0")°C</span></div> }
                                @if(Model.ThermalStatistics.AverageAvgTemp24h.HasValue) { <div class="data-row"><span>T.Med Med:</span><span class="badge bg-secondary">@Model.ThermalStatistics.AverageAvgTemp24h?.ToString("0.0")°C</span></div> }
                                @if(Model.ThermalStatistics.AverageMinTemp24h.HasValue) { <div class="data-row"><span>T.Mín Med:</span><span class="badge bg-primary">@Model.ThermalStatistics.AverageMinTemp24h?.ToString("0.0")°C</span></div> }
                            } else { <p class="small text-muted mb-0">No hay datos.</p> }
                        </div>
                    </div>
                }
                else { <p class="small text-muted mb-0">No hay promedios.</p> }
            </div>
        </div>
    </div>
</div>

@* --- SEGUNDA FILA: GRÁFICOS --- *@
<div class="row">
    <div class="col-lg-4 mb-3">
        <div class="card">
            <div class="card-header">Temperatura Ambiental (°C) - Últimas 24h</div>
            <div class="card-body" style="height: 280px;">
                <canvas id="temperatureChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-lg-4 mb-3">
        <div class="card">
            <div class="card-header">Humedad Ambiental (%) - Últimas 24h</div>
            <div class="card-body" style="height: 280px;">
                <canvas id="humidityChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-lg-4 mb-3">
        <div class="card">
            <div class="card-header">Niveles de Luz (lx) - Últimas 24h</div>
            <div class="card-body" style="height: 280px;">
                <canvas id="lightChart"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
    <script>
        function createTimeSeriesChart(canvasId, chartDataJson, yAxisLabel = '', suggestedMin = undefined, suggestedMax = undefined) {
            const ctx = document.getElementById(canvasId);
            if (!ctx) { console.error("Canvas no encontrado: " + canvasId); return; }

            let chartData;
            try {
                chartData = JSON.parse(chartDataJson);
            } catch (e) {
                console.error("Error parseando JSON para gráfico " + canvasId + ": ", e, chartDataJson);
                const context = ctx.getContext('2d');
                if (context) {
                    context.clearRect(0, 0, ctx.width, ctx.height);
                    context.textAlign = 'center';
                    context.fillText('Error cargando datos del gráfico.', ctx.width / 2, ctx.height / 2);
                }
                return;
            }
            
            if (!chartData || !chartData.Labels || !chartData.Values || chartData.Values.length === 0) {
                console.warn('Datos para el gráfico ' + canvasId + ' no disponibles o incompletos.');
                const context = ctx.getContext('2d');
                 if (context) {
                    context.clearRect(0, 0, ctx.width, ctx.height);
                    context.textAlign = 'center';
                    context.fillText('No hay datos disponibles para mostrar.', ctx.width / 2, ctx.height / 2);
                }
                return;
            }

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: chartData.Labels,
                    datasets: [{
                        label: chartData.DataSetLabel || 'Valores',
                        data: chartData.Values,
                        borderColor: chartData.BorderColor || 'rgb(75, 192, 192)',
                        backgroundColor: chartData.BackgroundColor || 'rgba(75, 192, 192, 0.2)',
                        tension: chartData.Tension !== undefined ? chartData.Tension : 0.3, // Ligeramente menos curvo
                        fill: true,
                        pointRadius: chartData.PointRadius !== undefined ? chartData.PointRadius : 2,
                        pointHoverRadius: chartData.PointHoverRadius !== undefined ? chartData.PointHoverRadius : 5
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false, 
                    scales: {
                        x: {
                            title: { display: true, text: 'Hora (Últimas 24h)' },
                            ticks: { autoSkip: true, maxTicksLimit: 10, color: '#6c757d' }, // Color de ticks más suave
                            grid: { display: false } // Ocultar grid X
                        },
                        y: {
                            title: { display: true, text: yAxisLabel },
                            beginAtZero: (yAxisLabel.toLowerCase().includes('luz') || yAxisLabel.toLowerCase().includes('humedad')),
                            suggestedMin: suggestedMin,
                            suggestedMax: suggestedMax,
                            ticks: { color: '#6c757d' }, // Color de ticks más suave
                            grid: { color: '#e9ecef' } // Color de grid Y más suave
                        }
                    },
                    plugins: {
                        legend: { display: (chartData.DataSetLabel ? true : false), labels: { color: '#495057'} } // Color de leyenda
                    }
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            createTimeSeriesChart('temperatureChart', '@Html.Raw(tempDataJson)', 'Temperatura (°C)', @(Model.TemperatureChartData?.Values?.Any() == true ? "undefined" : "0"), @(Model.TemperatureChartData?.Values?.Any() == true ? "undefined" : "30"));
            createTimeSeriesChart('humidityChart', '@Html.Raw(humDataJson)', 'Humedad (%)', @(Model.HumidityChartData?.Values?.Any() == true ? "undefined" : "0"), @(Model.HumidityChartData?.Values?.Any() == true ? "undefined" : "100"));
            createTimeSeriesChart('lightChart', '@Html.Raw(lightDataJson)', 'Luz (lx)');
        });
    </script>
}