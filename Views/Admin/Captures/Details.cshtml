@using System.Text.Json
@model ArandanoIRT.Web._1_Application.DTOs.SensorData.ThermalCaptureDetailsDto

@{
    ViewData["Title"] = "Detalle de Captura";
    Layout = "_AdminLayout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/captureDetails.css" asp-append-version="true"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
}


@if (Model == null)
{
    <div class="alert alert-warning">Captura no encontrada.</div>
    <a asp-action="Index" class="btn btn-secondary">Volver al listado de capturas</a>
    return;
}

<div class="details-container">
    <div class="details-header">
        <h1>@ViewData["Title"]</h1>
    </div>
    <div class="details-body">
        @if (ViewData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger" role="alert">@ViewData["ErrorMessage"]</div>
        }

        <div class="row g-lg-5">
            <!-- Columna Izquierda: Información y Estadísticas -->
            <div class="col-lg-5 col-xl-4">
                <h4 class="section-title">Detalles de Captura</h4>
                <dl class="row data-section">
                    <dt class="col-sm-5">@Html.DisplayNameFor(model => model.DeviceName)</dt>
                    <dd class="col-sm-7">@Html.DisplayFor(model => model.DeviceName)</dd>

                    <dt class="col-sm-5">ID Dispositivo</dt>
                    <dd class="col-sm-7">@Model.DeviceId</dd>

                    <dt class="col-sm-5">@Html.DisplayNameFor(model => model.PlantName)</dt>
                    <dd class="col-sm-7">@Html.DisplayFor(model => model.PlantName)</dd>

                    <dt class="col-sm-5">@Html.DisplayNameFor(model => model.CropName)</dt>
                    <dd class="col-sm-7">@Html.DisplayFor(model => model.CropName)</dd>

                    <dt class="col-sm-5">@Html.DisplayNameFor(model => model.RecordedAt)</dt>
                    <dd class="col-sm-7">@Model.RecordedAt.ToString("g")</dd>
                </dl>

                <hr class="my-4"/>

                <h4 class="section-title">Estadísticas de Temp.</h4>
                <div class="stats-wrapper">
                    <div class="stat-card stat-max">
                        <i class="fas fa-temperature-high stat-icon"></i>
                        <div class="stat-info">
                            <div class="stat-value">@Model.MaxTemp.ToString("0.0")°C</div>
                            <div class="stat-label">Máxima</div>
                        </div>
                    </div>
                    <div class="stat-card stat-avg">
                        <i class="fas fa-thermometer-half stat-icon"></i>
                        <div class="stat-info">
                            <div class="stat-value">@Model.AvgTemp.ToString("0.0")°C</div>
                            <div class="stat-label">Promedio</div>
                        </div>
                    </div>
                    <div class="stat-card stat-min">
                        <i class="fas fa-temperature-low stat-icon"></i>
                        <div class="stat-info">
                            <div class="stat-value">@Model.MinTemp.ToString("0.0")°C</div>
                            <div class="stat-label">Mínima</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Columna Derecha: Visualizaciones -->
            <div class="col-lg-7 col-xl-8">
                <div class="row">
                    <div class="col-12">
                        <h4 class="section-title">Visualización Térmica</h4>
                        @if (Model.Temperatures != null && Model.Temperatures.Any())
                        {
                            <div class="overflow-auto text-center mb-3">
                                <div class="d-inline-block" id="heatmapContainerWrapper"
                                     style="padding:10px; border:1px solid #eee; background-color: #f9f9f9;">
                                    <div id="heatmapContainer"
                                         style="width: @(Model.ThermalImageWidth * 15)px; height: @(Model.ThermalImageHeight * 15)px; border:1px solid #ccc; position:relative; margin:auto;">
                                    </div>
                                </div>
                            </div>
                            <small class="form-text text-muted mt-2 d-block text-center">Pasa el cursor sobre el heatmap
                                para ver la temperatura por píxel.</small>
                        }
                        else
                        {
                            <div class="alert alert-info">No hay datos de temperaturas para generar el heatmap.</div>
                        }
                    </div>

                    <div class="col-12 mt-4">
                        <h4 class="section-title">Imagen RGB</h4>
                        <div class="visualization-container">
                            @if (!string.IsNullOrEmpty(Model.RgbImagePath))
                            {
                                <img id="rgbImageLink" src=@Model.RgbImagePath alt="Imagen RGB de la captura"/>
                            }
                            else
                            {
                                <div class="alert alert-info mb-0">No hay imagen RGB disponible.</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="details-footer">
        <a asp-action="Index" class="btn btn-custom-primary"><i class="fas fa-arrow-left me-2"></i>Volver al Listado</a>
    </div>
</div>



<div id="imageModal" class="image-modal">
    <span class="image-modal-close">&times;</span>
    <img class="image-modal-content" id="modalImage">
</div>

<div id="tooltip"></div>

@section Scripts {
    @if (Model.Temperatures != null && Model.Temperatures.Any())
    {
        <script src="~/lib/heatmap/dist/heatmap.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // --- LÓGICA DEL MODAL DE IMAGEN ---
                const modal = document.getElementById("imageModal");
                const imgLink = document.getElementById("rgbImageLink");
                const modalImg = document.getElementById("modalImage");

                if (imgLink) {
                    imgLink.onclick = function () {
                        modal.style.display = "block";
                        modalImg.src = this.src;
                    }
                }

                const span = document.getElementsByClassName("image-modal-close")[0];
                if (span) {
                    span.onclick = function () {
                        modal.style.display = "none";
                    }
                }

                if (modal) {
                    modal.onclick = function (event) {
                        if (event.target === modal) {
                            modal.style.display = "none";
                        }
                    }
                }

                // --- LÓGICA DEL HEATMAP (TAMAÑO FIJO) ---
                const temperatures = @Html.Raw(JsonSerializer.Serialize(Model.Temperatures));
                const dataWidth = @Model.ThermalImageWidth;
                const dataHeight = @Model.ThermalImageHeight;
                const pointSize = 15;

                const container = document.getElementById('heatmapContainer');
                const tooltip = document.getElementById('tooltip');

                if (!temperatures || temperatures.length === 0 || temperatures.length !== dataWidth * dataHeight) {
                    console.error("Datos de temperatura inválidos o ausentes.");
                    return;
                }

                let validTemps = temperatures.filter(t => t !== null);
                let minTemp = validTemps.length > 0 ? Math.min(...validTemps) : 20;
                let maxTemp = validTemps.length > 0 ? Math.max(...validTemps) : 30;

                if (minTemp === maxTemp && validTemps.length > 0) {
                    minTemp -= 1;
                    maxTemp += 1;
                } else if (validTemps.length === 0) {
                    minTemp = 20;
                    maxTemp = 30;
                }

                const dataPoints = [];
                for (let y = 0; y < dataHeight; y++) {
                    for (let x = 0; x < dataWidth; x++) {
                        const tempValue = temperatures[y * dataWidth + x];
                        if (tempValue !== null) {
                            dataPoints.push({
                                x: x * pointSize + Math.floor(pointSize / 2),
                                y: y * pointSize + Math.floor(pointSize / 2),
                                value: tempValue
                            });
                        }
                    }
                }

                const heatmapInstance = h337.create({
                    container: container,
                    radius: pointSize,
                    maxOpacity: 0.9, minOpacity: 0.1, blur: .95,
                    gradient: {
                        '.1': 'rgba(0,0,255,0.7)', '.25': 'rgba(0,255,255,0.7)',
                        '.5': 'rgba(0,255,0,0.7)', '.75': 'rgba(255,255,0,0.7)',
                        '.95': 'rgba(255,0,0,0.7)'
                    }
                });

                heatmapInstance.setData({max: maxTemp, min: minTemp, data: dataPoints});

                container.onmousemove = function (e) {
                    const rect = container.getBoundingClientRect();
                    const mouseX = e.clientX - rect.left;
                    const mouseY = e.clientY - rect.top;

                    const x = Math.floor(mouseX / pointSize);
                    const y = Math.floor(mouseY / pointSize);

                    if (x >= 0 && x < dataWidth && y >= 0 && y < dataHeight) {
                        const tempValue = temperatures[y * dataWidth + x];
                        tooltip.style.display = 'block';
                        setTimeout(() => {
                            tooltip.style.opacity = 1;
                        }, 10);

                        tooltip.style.left = (e.clientX + 15) + 'px';
                        tooltip.style.top = (e.clientY + 15) + 'px';

                        if (tempValue !== null) {
                            tooltip.innerHTML = `Temp: <b>${tempValue.toFixed(2)}°C</b><br/>Coord: (x:${x}, y:${y})`;
                        } else {
                            tooltip.innerHTML = `N/A (x:${x}, y:${y})`;
                        }
                    } else {
                        tooltip.style.opacity = 0;
                        setTimeout(() => {
                            tooltip.style.display = 'none';
                        }, 200);
                    }
                };

                container.onmouseout = function () {
                    tooltip.style.opacity = 0;
                    setTimeout(() => {
                        tooltip.style.display = 'none';
                    }, 200);
                };
            });
        </script>
    }
}
